{"mappings":"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","sources":["index.js"],"sourcesContent":["const HS_EVENTS_ENUM = {\n  ERROR: 'hs-error',\n  SUCCESS: 'hs-success',\n};\n\nconst LISTENER_MODE_ENUM = {\n  POLLING: 'POLLING',\n  SOCKET: 'SOCKET',\n};\n\n// const ENV = {\n//     DEV: \"DEV\",\n//     PROD: \"PROD\"\n// }\n\n/**\n * Checks if browser support WebSocket\n * @returns Boolean\n */\nfunction checkForWebSocketSupport() {\n  window.WebSocket = window.WebSocket || window.MozWebSocket;\n  if (!window.WebSocket) {\n    return false;\n  }\n  return true;\n}\n\nfunction dispatchEvents({ accessToken, refreshToken }) {\n  if (!accessToken || !refreshToken) {\n    return document.dispatchEvent(\n      new CustomEvent(HS_EVENTS_ENUM.ERROR, {\n        detail: 'Could not fetch accessToken or refreshToken after authentication',\n        bubbles: true,\n      })\n    );\n  }\n\n  document.dispatchEvent(\n    new CustomEvent(HS_EVENTS_ENUM.SUCCESS, {\n      detail: { accessToken, refreshToken },\n      bubbles: true,\n    })\n  );\n}\n\n/**\n * Initiates Socket and Does all the work for fetching the challenge and access tokens.\n */\nfunction initiateSocket({ rpServerSocketURL, hsLoginBtnDOM, hsLoginQRDOM, hsloginBtnText, hsWalletBaseURL }) {\n  if (!rpServerSocketURL) {\n    throw new Error('HSAuth:: Relying Party Websocket URL must passed');\n  }\n\n  let ws = new WebSocket(rpServerSocketURL);\n\n  ws.onopen = function () {};\n\n  ws.onmessage = function ({ data }) {\n    let messageData = JSON.parse(data);\n    if (messageData.op == 'init') {\n      formQRAndButtonHTML({\n        hsWalletBaseURL,\n        hsLoginBtnDOM,\n        hsLoginQRDOM,\n        qrDataStr: JSON.stringify(messageData.data),\n        hsloginBtnText,\n      });\n    } else if (messageData.op == 'end') {\n      ws.close();\n      const { accessToken, refreshToken } = messageData.data.hypersign.data;\n      dispatchEvents({\n        accessToken,\n        refreshToken,\n      });\n    }\n  };\n\n  ws.onerror = function (e) {\n    document.dispatchEvent(\n      new CustomEvent('hs-error', {\n        detail: e.message,\n      })\n    );\n  };\n\n  ws.close = function () {};\n}\n\n/**\n * Displays QRCode and Login Button\n * @param {*} param0\n */\nfunction formQRAndButtonHTML({ hsWalletBaseURL, hsLoginBtnDOM, hsLoginQRDOM, qrDataStr, hsloginBtnText }) {\n  // Display the Login Button\n  if (hsLoginBtnDOM) {\n    const weblink = encodeURI(hsWalletBaseURL + '/deeplink?url=' + qrDataStr);\n    hsLoginBtnDOM.innerHTML = `<button onclick=\"window.open('${weblink}', 'popUpWindow','height=800,width=400,left=100,top=100,resizable=yes,scrollbars=yes,toolbar=yes,menubar=no,location=no,directories=no, status=yes');\">${hsloginBtnText}</button>`;\n  }\n\n  // TODO: Display the QR code to use with mobile app\n  if (hsLoginQRDOM) {\n    // display QR code\n  }\n}\n\n/**\n *\n * @param {*} interval\n * @param {*} challenge\n * @returns\n */\nfunction poll({ hsPollingInterval, challenge, sanitizeBaseUrl, sanitizePollResource }) {\n  return new Promise(function (resolve, reject) {\n    const ticker = setInterval(function () {\n      const url = `${sanitizeBaseUrl}/${sanitizePollResource}?challenge=${challenge}`;\n      return fetch(url)\n        .then((res) => res.json())\n        .then((json) => {\n          const { hypersign } = json;\n          const { success, data } = hypersign;\n          if (success && success === true) {\n            clearInterval(ticker);\n            resolve(data);\n          }\n        })\n        .catch((e) => {\n          reject(e);\n        });\n    }, hsPollingInterval);\n  });\n}\n\n/**\n *\n * @param {*} param0\n */\nasync function initiatePolling({\n  rpBaseURL,\n  hsLoginBtnDOM,\n  hsLoginQRDOM,\n  hsloginBtnText,\n  hsWalletBaseURL,\n  hsPollingInterval,\n  rpChallengeResource,\n  rpPollResource,\n}) {\n  // Url sanitization\n  const sanitizeBaseUrl = rpBaseURL.endsWith('/') ? rpBaseURL.substr(0, rpBaseURL.length - 1) : rpBaseURL;\n  const sanitizeChallengeResource = rpChallengeResource.startsWith('/')\n    ? rpChallengeResource.substr(1, rpChallengeResource.length)\n    : rpChallengeResource;\n  const sanitizePollResource = rpPollResource.startsWith('/')\n    ? rpPollResource.substr(1, rpPollResource.length)\n    : rpPollResource;\n\n  /// Fetch the challenge\n  const url = `${sanitizeBaseUrl}/${sanitizeChallengeResource}`;\n  const rs = await fetch(url, {\n    method: 'POST',\n    headers: {\n      'Content-type': 'application/json',\n    },\n  });\n  const js = await rs.json();\n  const { hypersign } = js;\n  const { data } = hypersign;\n  const { challenge } = data;\n\n  formQRAndButtonHTML({\n    hsWalletBaseURL,\n    hsLoginBtnDOM,\n    hsLoginQRDOM,\n    qrDataStr: JSON.stringify(data),\n    hsloginBtnText,\n  });\n\n  if (challenge) {\n    /// start the polling\n    const x = await poll({ hsPollingInterval, challenge, sanitizeBaseUrl, sanitizePollResource });\n    const { accessToken, refreshToken } = x;\n    dispatchEvents({\n      accessToken,\n      refreshToken,\n    });\n  } else {\n    throw new Error('HSAuth:: Could Not Fetch New Challenge from API');\n  }\n}\n\n/**\n * Starts the program\n * @returns void\n */\nfunction start(options) {\n  try {\n    const { LISTENER_MODE } = options;\n\n    const hsLoginBtnDOM = document.getElementById('hs-auth-btn');\n    const hsLoginQRDOM = document.getElementById('hs-auth-qr');\n\n    if (!hsLoginBtnDOM && !hsLoginQRDOM) {\n      throw new Error(\"HSAuth:: No DOM Element Found With Id 'hs-auth-btn' or 'hs-auth-qr'\");\n    }\n\n    switch (LISTENER_MODE) {\n      case LISTENER_MODE_ENUM.SOCKET: {\n        if (!checkForWebSocketSupport()) {\n          throw new Error(\"HSAuth:: Sorry, Your Browser Doesn't Support WebSocket. Use Polling Instead.\");\n        }\n        const { RP_SOCKET_URL } = options;\n        if (!RP_SOCKET_URL) {\n          throw new Error('HSAuth:: Relying Party Socket URL Must Be Passed for Websocket Mode');\n        }\n        const rpSocketParsedUrl = new URL(RP_SOCKET_URL);\n        console.log(rpSocketParsedUrl);\n        initiateSocket({\n          rpServerSocketURL: rpSocketParsedUrl.href,\n          hsLoginBtnDOM,\n          hsLoginQRDOM,\n          hsloginBtnText: options.LOGIN_BUTTON_TEXT,\n          hsWalletBaseURL: options.HS_WALLET_BASEURL,\n        });\n        break;\n      }\n\n      case LISTENER_MODE_ENUM.POLLING: {\n        let { RP_SERVER_BASEURL, POLLING_INTERVAL } = options;\n        if (!RP_SERVER_BASEURL) {\n          throw new Error('HSAuth:: Relying Party Base Url Must Be Passed For Polling Mode');\n        }\n\n        const rpBaseParsedUrl = new URL(RP_SERVER_BASEURL);\n        console.log(rpBaseParsedUrl);\n        if (!POLLING_INTERVAL) {\n          POLLING_INTERVAL = 5000;\n        }\n\n        initiatePolling({\n          rpBaseURL: rpBaseParsedUrl.href,\n          hsLoginBtnDOM,\n          hsLoginQRDOM,\n          hsloginBtnText: !options.LOGIN_BUTTON_TEXT ? 'LOGIN USING HYPERSIGN' : options.LOGIN_BUTTON_TEXT,\n          hsWalletBaseURL: options.HS_WALLET_BASEURL,\n          hsPollingInterval: POLLING_INTERVAL,\n          rpChallengeResource: !options.RP_CHALLENGE_RESOURCE ? 'api/v1/auth/challenge' : options.RP_CHALLENGE_RESOURCE,\n          rpPollResource: !options.RP_POLLING_RESOURCE ? 'api/v1/auth/poll' : options.RP_POLLING_RESOURCE,\n        });\n        break;\n      }\n\n      default: {\n        throw new Error('HSAuth:: Invalid Listener Mode');\n      }\n    }\n  } catch (e) {\n    document.dispatchEvent(\n      new CustomEvent(HS_EVENTS_ENUM.ERROR, {\n        detail: e.message,\n        bubbles: true,\n      })\n    );\n  }\n}\n\nconst options = {\n  LISTENER_MODE: LISTENER_MODE_ENUM.POLLING,\n  RP_SOCKET_URL: 'ws://localhost:4006',\n  RP_SERVER_BASEURL: 'http://localhost:4006',\n  RP_CHALLENGE_RESOURCE: '/challenge',\n  RP_POLLING_RESOURCE: '/poll',\n  LOGIN_BUTTON_TEXT: 'LOGIN USING HYPERSIGN',\n  HS_WALLET_BASEURL: 'https://hswallet-stage.netlify.app',\n  POLLING_INTERVAL: 5000,\n};\n\nstart(options);\n"],"names":["$2e2a1fea436dbc58$var$HS_EVENTS_ENUM","$2e2a1fea436dbc58$var$LISTENER_MODE_ENUM","$2e2a1fea436dbc58$var$dispatchEvents","accessToken","refreshToken","document","dispatchEvent","CustomEvent","detail","bubbles","$2e2a1fea436dbc58$var$formQRAndButtonHTML","hsWalletBaseURL","hsLoginBtnDOM","hsLoginQRDOM","qrDataStr","hsloginBtnText","weblink","encodeURI","innerHTML","async","$2e2a1fea436dbc58$var$initiatePolling","rpBaseURL","hsPollingInterval","rpChallengeResource","rpPollResource","sanitizeBaseUrl","endsWith","substr","length","sanitizeChallengeResource","startsWith","sanitizePollResource","url","rs","fetch","method","headers","js","json","hypersign","data","challenge","JSON","stringify","Error","x","Promise","resolve","reject","ticker","setInterval","then","res","success","clearInterval","catch","e","$2e2a1fea436dbc58$var$poll","options","LISTENER_MODE","getElementById","window","WebSocket","MozWebSocket","RP_SOCKET_URL","rpSocketParsedUrl","URL","console","log","rpServerSocketURL","ws","onopen","onmessage","messageData","parse","op","close","onerror","message","$2e2a1fea436dbc58$var$initiateSocket","href","LOGIN_BUTTON_TEXT","HS_WALLET_BASEURL","RP_SERVER_BASEURL","POLLING_INTERVAL","rpBaseParsedUrl","RP_CHALLENGE_RESOURCE","RP_POLLING_RESOURCE","$2e2a1fea436dbc58$var$start"],"version":3,"file":"index.js.map"}